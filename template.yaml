AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Traxler

  Princeton's voguish directory.

# These apply to every resource of the matching type.
Globals:

  Tags:
    - project: traxler

  Function:
    CodeUri: function/

    # We generally want out functions to finish quickly because:
    # 1) This is a good user experience, and
    # 2) This saves us money!
    Timeout: 3

    # Shared code layers (libraries) that all functions have access to.
    Layers:
      - !Ref CommonLambdaLayer
      - !Ref DependencyLambdaLayer

    # Environment variables that all lambda functions have access to.
    Environment:
      Variables:
        WEBSITE_DOMAIN: !Ref WebsiteDomain
        STUDENT_INFORMATION_TABLE: !Ref StudentInformationTable
        AUTHENTICATION_TABLE: !Ref AuthenticationTable

# These allow the user deploying the template to customize the deployment.
Parameters:

  WebsiteDomain:
    Type: String
    Default: nassau.network
    Description: The domain name (including subdomain) Traxler will be hosted at

Resources:

  # Buckets. -------------------------------------------------------------------

  # Stores student images.
  StudentImageBucket:
    Type: AWS::S3::Bucket

  # Hosts the static portion of the website.
  StaticWebsiteBucket:
    Type: AWS::S3::Bucket
    WebsiteConfiguration:
      IndexDocument: index.html
      ErrorDocument: 404.html

  # CloudFront Distributions. --------------------------------------------------
  """
  # The CDN that serves the website content, both static html and images.
  StaticWebsiteCloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: 'true'
        Origins:
          - DomainName: TODO
            Id: StaticWebsiteOrigin
            S3OriginConfig:
              OriginAccessIdentity: TODO
        Origins:
          - DomainName: TODO
            Id: StaticWebsiteOrigin
            S3OriginConfig:
              OriginAccessIdentity: TODO
        Aliases:
          - ${WebsiteDomain}
  """
  # DynamoDB Tables. -----------------------------------------------------------

  # The main Traxler database; stores the student information.
  StudentInformationTable:
    Type: AWS::DynamoDB::Table
      Properties: 
        # Princeton students can be unpredictable and are in one time zone, so
        # no need to reserve capacity.
        BillingMode: PAY_PER_REQUEST

        AttributeDefinitions: 
          # Defines the attributes we'll store in this table. There's no need to
          # list every possible attribute as those can be created on-demand.
          # We do need to list attributes used in all keys.
          - AttributeName: _netid
            AttributeType: S

          - AttributeName: _college
            AttributeType: S
          - AttributeName: _study
            AttributeType: S

          - AttributeName: _fname
            AttributeType: S
          - AttributeName: _lname
            AttributeType: S

        # The main key is the student's netid.
        KeySchema: 
          - AttributeName: _netid
            KeyType: HASH

        GlobalSecondaryIndexes: 
          # Allow query by residential college.
          - IndexName: _college-index
            KeySchema:
              - AttributeName: _college
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          # Allow query by concentration.
          - IndexName: _study-index
            KeySchema:
              - AttributeName: _study
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          # Allow query by first name, subquery by last name.
          - IndexName: _fname-_lname-index
            KeySchema:
              - AttributeName: _fname
                KeyType: HASH
              - AttributeName: _lname
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          # Allow query by last name, subquery by first name.
          - IndexName: _lname_-fname-index
            KeySchema:
              - AttributeName: _lname
                KeyType: HASH
              - AttributeName: _fname
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

  # Stores access keys when users log into the site via CAS.
  AuthenticationTable:
    Type: AWS::DynamoDB::Table
      Properties: 
        # Princeton students can be unpredictable and are in one time zone, so
        # no need to reserve capacity.
        BillingMode: PAY_PER_REQUEST

        AttributeDefinitions: 
          # Defines the attributes we'll store in this table. There's no need to
          # list every possible attribute as those can be created on-demand.
          # We do need to list attributes used in all keys.
          - AttributeName: _netid
            AttributeType: S

        # The main key is the student's netid.
        KeySchema: 
          - AttributeName: _netid
            KeyType: HASH

  # Lambdas. -------------------------------------------------------------------

  # Returns information about a student.
  StudentLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: student.lambda_handler
      Runtime: python3.8
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /student
            Method: GET

  # Returns student results of a query.
  SearchLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: search.lambda_handler
      Runtime: python3.8
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /search
            Method: GET

  # Validates a CAS login.
  ValidateLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: validate.lambda_handler
      Runtime: python3.8
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /validate
            Method: POST

  # Lambda Shared Code Layers. -------------------------------------------------
  CommonLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: common/
      Description: contains shared code for the lambdas.
      CompatibleRuntimes:
        - python3.8

  # External pip dependency layer.
  DependencyLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: dependency/
      Description: contains the external libraries.
      CompatibleRuntimes:
        - python3.8

#Outputs:
  #HelloWorldApi:
  #  Description: "API Gateway endpoint URL for Prod stage for Hello World function"
  #  Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  #HelloWorldFunction:
  #  Description: "Hello World Lambda Function ARN"
  #  Value: !GetAtt HelloWorldFunction.Arn
